#include "ns3/core-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/mobility-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/yans-wifi-helper.h"
#include "ns3/ssid.h"
#include "ns3/wifi-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include <iostream>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("Homework2");

void CourseChange (std::string context, Ptr<const MobilityModel> model) {
  Vector position = model->GetPosition ();
  NS_LOG_UNCOND (context <<" x = " << position.x << ", y = " << position.y);
}

int main (int argc, char *argv[]) {
  uint32_t nWifi = 6;
  bool RTS = false;

  if (RTS) {
    Config::SetDefault ("ns3::WifiRemoteStationManager::RtsCtsThreshold", StringValue ("0"));
  }

  NodeContainer wifiNodes;
  wifiNodes.Create (nWifi);
  
  YansWifiChannelHelper channel = YansWifiChannelHelper::Default();
  YansWifiPhyHelper phy = YansWifiPhyHelper::Default();
  phy.SetChannel(channel.Create());

  WifiHelper wifi;
  wifi.SetStandard(WIFI_PHY_STANDARD_80211g);
  wifi.SetRemoteStationManager("ns3::AarfWifiManager");

  WifiMacHelper mac;
  mac.SetType ("ns3::AdhocWifiMac", "Ssid", SsidValue(Ssid("ns-3-ssid")));

  NetDeviceContainer staDevices;
  staDevices = wifi.Install(phy, mac, wifiNodes);

  MobilityHelper mobility;

  mobility.SetPositionAllocator("ns3::GridPositionAllocator",
                                 "MinX", DoubleValue(0.0),
                                 "MinY", DoubleValue(0.0),
                                 "DeltaX", DoubleValue(5.0),
                                 "DeltaY", DoubleValue(10.0),
                                 "GridWidth", UintegerValue(3),
                                 "LayoutType", StringValue("RowFirst"));

  mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel",
                             "Bounds", RectangleValue(Rectangle(-100, 100, -100, 100)));
  mobility.Install(wifiNodes);

  InternetStackHelper stack;
  stack.Install(wifiNodes);

  Ipv4AddressHelper address;

  address.SetBase("192.168.1.0", "255.255.255.0");
  Ipv4InterfaceContainer wifiNodesInterfaces;

  wifiNodesInterfaces = address.Assign(staDevices);

  UdpEchoServerHelper echoServer(20);

  ApplicationContainer serverApps = echoServer.Install(wifiNodes.Get(0));
  serverApps.Start(Seconds(1.0));
  serverApps.Stop(Seconds(10.0));

  UdpEchoClientHelper echoClient (wifiNodesInterfaces.GetAddress (0), 20);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (2));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (2.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

  UdpEchoClientHelper echoClient1 (wifiNodesInterfaces.GetAddress (0), 20);
  echoClient1.SetAttribute("MaxPackets", UintegerValue(2));
  echoClient1.SetAttribute("Interval", TimeValue(Seconds(1.0)));
  echoClient1.SetAttribute("PacketSize", UintegerValue(1024));

  ApplicationContainer clientApps;

  echoClient.SetAttribute("StartTime", TimeValue(Seconds(2.0)));
  clientApps.Add(echoClient.Install(wifiNodes.Get(5)));
  echoClient1.SetAttribute("StartTime", TimeValue(Seconds(3.0)));
  clientApps.Add(echoClient1.Install(wifiNodes.Get(4)));

  Ipv4GlobalRoutingHelper::PopulateRoutingTables();
  

  Simulator::Stop(Seconds(10.0));

  phy.SetPcapDataLinkType(WifiPhyHelper::DLT_IEEE802_11_RADIO);
  phy.EnablePcap(RTS ? "rtscts-task1" : "task1", staDevices.Get (2), true);

  std::ostringstream oss;
  oss <<"/NodeList/" << wifiNodes.Get(2)->GetId() <<"/$ns3::MobilityModel/CourseChange";
  Config::Connect(oss.str(), MakeCallback(&CourseChange));

  Simulator::Run();
  Simulator::Destroy();
  return 0;
}
